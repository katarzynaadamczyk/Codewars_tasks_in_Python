'''
my solution to task: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/
'''

from typing import List

# first attempt - works but too slow
class Solution_1:
    def maxOneProfit(self, prices: List[int]) -> int:
        act_min, profit = prices[0], 0
        for val in prices[1:]:
            if val < act_min:
                act_min = val
            elif profit < val - act_min:
                profit = val - act_min
        return profit
    
    
    def maxProfit(self, prices: List[int]) -> int:
        profit = self.maxOneProfit(prices)
        for i in range(1, len(prices) - 1):
            act_profit = self.maxOneProfit(prices[:i]) + self.maxOneProfit(prices[i:])
            if act_profit > profit:
                profit = act_profit
        return profit
    
# second try
class Solution_2:
    def maxProfit(self, prices: List[int]) -> int:
        act_min, act_max, min_indexes, max_indexes = 0, 0, [], []
        for i, val in enumerate(prices[1:], start=1):
            if val >= prices[i-1]:
                act_max = i
                if act_min == i - 1:
                    min_indexes.append(act_min)
            elif val <= prices[i-1]:
                act_min = i
                if act_max == i - 1:
                    max_indexes.append(act_max)
        else:
            if len(prices) - 1 == act_max:
                max_indexes.append(act_max)
            else:
                min_indexes.append(act_min)
                
        while len(max_indexes) and len(min_indexes) and max_indexes[0] < min_indexes[0]:
            max_indexes = max_indexes[1:]
        
        if len(min_indexes) > len(max_indexes):
            min_indexes = min_indexes[:-1]
            
        print(min_indexes)
        print(max_indexes)
        return 0
        
def main():
    sol = Solution_2()
    
    # test 1
    prices = [3,3,3,5,0,0,3,1,4]
    print(sol.maxProfit(prices), 'should equal 6')
    
    
    # test 2
    prices = [1,2,3,4,5]
    print(sol.maxProfit(prices), 'should equal 4')
    
    
    # test 3
    prices = [7,6,4,3,1]
    print(sol.maxProfit(prices), 'should equal 0')
    
    # test 4
    prices = [414,863,393,674,205,793,229,379,37,455,594,36,312,667,441,411,514,344,681,359,865,124,984,670,509,337,495,266,275,356,26,229,51,557,292,975,551,985,445,710,467,31,\
890,694,127,349,631,322,595,59,433,173,944,305,662,379,864,835,355,411,506,10,716,918,872,716,887,453,706,416,245,611,6,403,894,94,852,733,890,131,481,723,571,335,\
695,475,112,245,389,754,439,990,771,282,935,746,422,627,570,101,212,248,123,633,842,110,272,352,910,926,726,502,396,49,444,581,504,145,765,710,785,126,232,386,245,\
613,43,591,638,179,438,838,5,486,170,960,273,347,8,176,884,569,528,442,839,573,953,102,802,659,51,675,110,76,531,783,539,806,363,333,214,919,473,303,690,917,793,2,\
504,7,584,734,527,561,484,648,622,123,655,977,235,999,714,963,921,801,237,752,127,484,772,483,62,544,938,845,218,32,832,174,561,635,44,903,972,550,291,12,234,24,\
750,182,257,265,276,926,409,865,170,587,35,813,628,991,829,573,226,69,979,188,285,582,276,951,114,634,797,720,306,365,862,416,8,174,446,555,132,578,152,582,214,673,\
156,899,613,871,789,378,434,464,532,356,884,83,744,126,773,537,149,723,653,967,574,87,463,312,416,3,667,339,471,237,540,860,709,867,474,769,344,52,633,784,199,239,\
735,362,131,14,376,683,532,154,618,505,773,970,207,208,926,192,273,338,282,874,679,932,67,593,412,932,807,456,637,360,988,839,345,890,409,316,535,123,234,480,368,\
515,98,486,343,79,989,768,443,943,628,184,452,379,557,265,904,327,353,698,158,148,133,972,179,934,90,976,199,187,142,126,55,764,64,593,310,284,307,43,855,51,382,483,\
251,601,675,723,467,501,217,896,433,759,156,979,954,802,308,591,637,920,867,411,82,433,320,548,571,254,771,597,761,93,106,163,662,500,764,587,801,876,338,431,771,\
824,219,446,344,311,532,833,921,616,536,645,292,256,764,560,885,434,640,97,926,150,755,562,636,768,713,710,256,64,293,390,223,509,614,457,182,881,646,743,700,995,\
94,801,173,579,104,107,557,736,292,483,66,767,781,151,592,169,482,775,608,398,399,38,548,185,720,226,832,54,463,57,36,97,416,611,663,357,586,286,744,535,671,202,\
26,443,613,739,213,672,409,534,62,697,985,920,809,473,48,895,920,871,527,121,339,195,511,80,940,647,530,418,344,139,53,593,638,961,183,392,208,312,522,448,844,182,\
358,589,152,575,600,715,33,457,865,20,565,508,101,670,407,123,154,977,498,495,736,791,883,896,793,923,409,370,524,748,926,682,800,481,858,388,475,847,775,326,707,\
792,22,807,60,65,118,10,323,410,326,340,803,386,557,633,188,309,589,981,616,71,516,950,313,781,458,488,314,535,114,197,53,626,541,38,537,770,311,444,797,703,216,\
944,879,42,863,239,350,469,207,709,79,319,254,514,626,675,877,117,490,870,709,779,974,240,176,461,478,278,800,561,526,663,221,989,498,848,128,367,606,554,945,54,\
968,314,244,437,388,584,490,977,282,316,598,106,883,275,426,335,969,809,697,595,814,237,379,136,585,742,516,492,476,646,372,423,857,1,763,733,437,420,720,181,149,\
439,125,512,910,621,890,422,84,622,680,736,686,941,786,288,179,152,900,773,295,602,319,979,933,533,574,559,392,413,122,383,410,754,735,793,622,152,403,429,397,315,\
905,186,209,408,212,711,996,315,706,835,8,887,235,406,314,5,942,894,440,371,398,257,233,628,807,901,370,287,62,799,261,635,991,417,746,442,153,676,566,231,716,927,\
458,489,113,757,592,170,540,717,441,697,887,403,988,468,132,809,705,480,335,744,317,742,139,861,20,161,693,474,342,939,683,796,49,263,62,225,968,624,223,724,55,964,\
821,242,916,149,733,872,24,442,360,252,693,813,567,672,181,173,76,646,286,660,50,613,445,296,821,30,729,632,491,849,954,188,216,257,104,168,275,650,707,448,513,463,\
908,198,272,655,258,758,793,204,45,352,488,791,361,963,626,980,337,594,259,215,338,670,332,211,430,406,875,839,474,878,181,890,753,923,160,872,227,348,123,48,677,365,\
56,901,179,41,822,724,188,184,746,617,84,714,575,94,242,980,665,336,175,67,676,51,498,787,861,414,329,979,596,743,685,546,19,906,536,747,618,41,106,632,709,922,495,947,\
720,254,95,422,292,758,73,58,880,393,330,783,732,103,400,592,970,245,34,83,468,935,805,514,113,404,26,237,995,143,269,737,213,595,770,405,203,64,904,501,132,347,983,418,\
974,242,883,945,597,88,245,612,352,714,419,983,157,627,688,950,469,59,510,921,422,438,495,907,452,501,394,79,45,186,359,97,181,830,542,428,520,801,275,137,753,665,403,\
116,653,299,500,851,913,801,659,483,23,188,550,605,728,985,962,521,946,351,741,559,217,487,411,863,140,257,540,689,603,117,328,997,149,171,456,233,474,709,903,563,525,\
771,656,692,556,744,331,742,947,758,663,648,604,347,417,477,524,788,231,771,40,406,830,758,307,747,583,985,102,681,76,331,822,938,307,457,631,442,584,830,494,707,775,\
528,483,112,226,585,779,986,28,246,448,833,550,629,460,334,6,149,236,191,523,259,697,958,288,634,512,314,788,30,376,313,305,706,882,222,703,946,555,233,69,189,498,237,\
180,663,19,717,998,881,615,47,512,826,488,631,504,542,264,182,771,633,355,493,223,330,113,417,756,588,712,359,265,842,701,757,835,959,254,983,914,462,356,602,876,513,\
972,19,566,635,884,446,115,91,545,878,381,262,75,975,674,491,138,360,69,236,207,935,911,770,747,151,686,322,972,315,834,984,186,793,942,942,907,849,956,79,546,226,176,\
164,687,776,546,863,661,397,735,221,495,984,45,458,218,834,239,857,81,599,482,481,21,471,175,925,719,607,724,365,621,64,644,200,718,574,954,528,285,683,898,665,266,315,\
416,318,325,306,75,988,907,913,619,1,447,366,412,451,797,540,748,290,401,996,312,832,26,885,491,685,555,512,829,999,743,376,835,824,207,341,609,408,597,275,741,225,967,\
331,839,243,696,337,71,610,200,455,572,115,800,707,172,79,211,721,844,360,306,874,498,831,623,693,684,898,0,271,732,678,487,367,639,574,327,276,887,165,580,460,292,837]
    print(sol.maxProfit(prices), 'should equal ?')
    
    # test 5
    prices = [10000,9999,9998,9997,9996,9995,9994,9993,9992,9991,9990,9989,9988,9987,9986,9985,9984,9983,9982,9981,9980,9979,9978,9977,9976,9975,9974,9973,\
              9972,9971,9970,9969,9968,9967,9966,9965,9964,9963,9962,9961,9960,9959,9958,9957,9956,9955,9954,9953,9952,9951,9950,9949,9948,9947,9946,9945,9944,9943,\
              9942,9941,9940,9939,9938,9937,9936,9935,9934,9933,9932,9931,9930,9929,9928,9927,9926,9925,9924,9923,9922,9921,9920,9919,9918,9917,9916,9915,9914,9913,\
              9912,9911,9910,9909,9908,9907,9906,9905,9904,9903,9902,9901,9900,9899,9898,9897,9896,9895,9894,9893,9892,9891,9890,9889,9888,9887,9886,9885,9884,9883,\
              9882,9881,9880,9879,9878,9877,9876,9875,9874,9873,9872,9871,9870,9869,9868,9867,9866,9865,9864,9863,9862,9861,9860,9859,9858,9857,9856,9855,9854,9853,\
              9852,9851,9850,9849,9848,9847,9846,9845,9844,9843,9842,9841,9840,9839,9838,9837,9836,9835,9834,9833,9832,9831,9830,9829,9828,9827,9826,9825,9824,\
              9823,9822,9821,9820,9819,9818,9817,9816,9815,9814,9813,9812,9811,9810,9809,9808,9807,9806,9805,9804,9803,9802,9801,9800,9799,9798,9797,9796,9795,\
              9794,9793,9792,9791,9790,9789,9788,9787,9786,9785,9784,9783,9782,9781,9780,9779,9778,9777,9776,9775,9774,9773,9772,9771,9770,9769,9768,9767,\
              9766,9765,9764,9763,9762,9761,9760,9759,9758,9757,9756,9755,9754,9753,9752,9751,9750,9749,9748,9747,9746,9745,9744,9743,9742,9741,9740,9739,\
              9738,9737,9736,9735,9734,9733,9732,9731,9730,9729,9728,9727,9726,9725,9724,9723,9722,9721,9720,9719,9718,9717,9716,9715,9714,9713,9712,\
              9711,9710,9709,9708,9707,9706,9705,9704,9703,9702,9701,9700,9699,9698,9697,9696,9695,9694,9693,9692,9691,9690,9689,9688,9687,9686,9685,9684,9683,9682,9681,9680,\
              9679,9678,9677,9676,9675,9674,9673,9672,9671,9670,9669,9668,9667,9666,9665,9664,9663,9662,9661,9660,9659,9658,9657,9656,9655,9654,9653,9652,9651,9650,9649,9648,9647,\
              9646,9645,9644,9643,9642,9641,9640,9639,9638,9637,9636,9635,9634,9633,9632,9631,9630,9629,9628,9627,9626,9625,9624,9623,9622,9621,9620,9619,9618,9617,9616,9615,\
              9614,9613,9612,9611,9610,9609,9608,9607,9606,9605,9604,9603,9602,9601,9600,9599,9598,9597,9596,9595,9594,9593,9592,9591,9590,9589,9588,9587,9586,9585,9584,9583,\
              9582,9581,9580,9579,9578,9577,9576,9575,9574,9573,9572,9571,9570,9569,9568,9567,9566,9565,9564,9563,9562,9561,9560,9559,9558,9557,9556,9555,9554,9553,9552,9551,\
              9550,9549,9548,9547,9546,9545,9544,9543,9542,9541,9540,9539,9538,9537,9536,9535,9534,9533,9532,9531,9530,9529,9528,9527,9526,9525,9524,9523,9522,9521,9520,\
              9519,9518,9517,9516,9515,9514,9513,9512,9511,9510,9509,9508,9507,9506,9505,9504,9503,9502,9501,9500,9499,9498,9497,9496,9495,9494,9493,9492,9491,9490,\
              9489,9488,9487,9486,9485,9484,9483,9482,9481,9480,9479,9478,9477,9476,9475,9474,9473,9472,9471,9470,9469,9468,9467,9466,9465,9464,9463,9462,9461,9460,\
              9459,9458,9457,9456,9455,9454,9453,9452,9451,9450,9449,9448,9447,9446,9445,9444,9443,9442,9441,9440,9439,9438,9437,9436,9435,9434,9433,9432,9431,\
              9430,9429,9428,9427,9426,9425,9424,9423,9422,9421,9420,9419,9418,9417,9416,9415,9414,9413,9412,9411,9410,9409,9408,9407,9406,9405,9404,9403,\
              9402,9401,9400,9399,9398,9397,9396,9395,9394,9393,9392,9391,9390,9389,9388,9387,9386,9385,9384,9383,9382,9381,9380,9379,9378,9377,9376,\
              9375,9374,9373,9372,9371,9370,9369,9368,9367,9366,9365,9364,9363,9362,9361,9360,9359,9358,9357,9356,9355,9354,9353,9352,9351,9350,\
              9349,9348,9347,9346,9345,9344,9343,9342,9341,9340,9339,9338,9337,9336,9335,9334,9333,9332,9331,9330,9329,9328,9327,9326,9325,9324,\
              9323,9322,9321,9320,9319,9318,9317,9316,9315,9314,9313,9312,9311,9310,9309,9308,9307,9306,9305,9304,9303,9302,9301,9300,9299,\
              9298,9297,9296,9295,9294,9293,9292,9291,9290,9289,9288,9287,9286,9285,9284,9283,9282,9281,9280,9279,9278,9277,9276,9275,9274,\
              9273,9272,9271,9270,9269,9268,9267,9266,9265,9264,9263,9262,9261,9260,9259,9258,9257,9256,9255,9254,9253,9252,9251,9250,\
              9249,9248,9247,9246,9245,9244,9243,9242,9241,9240,9239,9238,9237,9236,9235,9234,9233,9232,9231,9230,9229,9228,9227,\
              9226,9225,9224,9223,9222,9221,9220,9219,9218,9217,9216,9215,9214,9213,9212,9211,9210,9209,9208,9207,9206,9205,\
              9204,9203,9202,9201,9200,9199,9198,9197,9196,9195,9194,9193,9192,9191,9190,9189,9188,9187,9186,9185,9184,\
              9183,9182,9181,9180,9179,9178,9177,9176,9175,9174,9173,9172,9171,9170,9169,9168,9167,9166,9165,9164,9163,\
              9162,9161,9160,9159,9158,9157,9156,9155,9154,9153,9152,9151,9150,9149,9148,9147,9146,9145,9144,9143,\
              9142,9141,9140,9139,9138,9137,9136,9135,9134,9133,9132,9131,9130,9129,9128,9127,9126,9125,9124,\
              9123,9122,9121,9120,9119,9118,9117,9116,9115,9114,9113,9112,9111,9110,9109,9108,9107,9106,\
              9105,9104,9103,9102,9101,9100,9099,9098,9097,9096,9095,9094,9093,9092,9091,9090,9089,9088,\
              9087,9086,9085,9084,9083,9082,9081,9080,9079,9078,9077,9076,9075,9074,9073,9072,9071,\
              9070,9069,9068,9067,9066,9065,9064,9063,9062,9061,9060,9059,9058,9057,9056,9055,9054,9053,9052,9051,9050,9049,9048,9047,9046,9045,9044,9043,9042,9041,9040,9039,9038,\
              9037,9036,9035]
    print(sol.maxProfit(prices), 'should equal ?')
    print(prices[960:970])
    
    # test 6
    prices = [1,2,3,2,1,2,3,2,1]
    print(sol.maxProfit(prices), 'should equal ?')
    

if __name__ == '__main__':
    main()
    