''' my solution to task: https://www.codewars.com/kata/54acd76f7207c6a2880012bb '''

import re
from sklearn.cluster import KMeans
import numpy as np
from itertools import zip_longest

MORSE_CODE = {'.-': 'A', '-...': 'B', '-.-.': 'C', '-..': 'D', '.': 'E', '..-.': 'F', 
              '--.': 'G', '....': 'H', '..': 'I', '.---': 'J', '-.-': 'K', '.-..': 'L', 
              '--': 'M', '-.': 'N', '---': 'O', '.--.': 'P', '--.-': 'Q', '.-.': 'R', 
              '...': 'S', '-': 'T', '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X', 
              '-.--': 'Y', '--..': 'Z', '-----': '0', '.----': '1', '..---': '2', '...--': 
              '3', '....-': '4', '.....': '5', '-....': '6', '--...': '7', '---..': '8', 
              '----.': '9', '.-.-.-': '.', '--..--': ',', '..--..': '?', '.----.': "'", 
              '-.-.--': '!', '-..-.': '/', '-.--.': '(', '-.--.-': ')', '.-...': '&', 
              '---...': ':', '-.-.-.': ';', '-...-': '=', '.-.-.': '+', '-....-': '-', 
              '..--.-': '_', '.-..-.': '"', '...-..-': '$', '.--.-.': '@', '...---...': 'SOS',
              '--.-..-': '#', '...---': '#', '........-': '#', '.--.-...-..': '#', '.-.-.-..--.': '#', '.-..--.-': '#', '.......': '#'}

min_cluster = 'min'
mid_cluster = 'mid'
max_cluster = 'max'


def get_dict_of_clusters(clusters_centers):
    result_dict = {}
    if len(clusters_centers) == 3:
        result_dict.setdefault(clusters_centers.index(min(clusters_centers)), min_cluster)
        result_dict.setdefault(clusters_centers.index(np.median(clusters_centers)), mid_cluster)
        result_dict.setdefault(clusters_centers.index(max(clusters_centers)), max_cluster)
    elif len(clusters_centers) == 2:
        result_dict.setdefault(clusters_centers.index(min(clusters_centers)), min_cluster)
        result_dict.setdefault(clusters_centers.index(max(clusters_centers)), mid_cluster)
    elif len(clusters_centers) == 1:
        result_dict.setdefault(0, min_cluster)
    return result_dict


def get_ones(clusters_dict, ones_len_prediction):
    return ['.' if clusters_dict.get(x) == min_cluster else '-' for x in ones_len_prediction]


def get_zeros(clusters_dict, zeros_len_prediction):
    return ['' if clusters_dict.get(x) == min_cluster else ' ' if clusters_dict.get(x) == mid_cluster else '   ' for x in zeros_len_prediction]


def decodeBitsAdvanced(bits):
    # ToDo: Accept 0's and 1's, return dots, dashes and spaces
    bits = bits.strip('0')
    ones_len, zeros_len = [len(x) for x in re.findall(r'[1]{1,}', bits)], [len(x) for x in re.findall(r'[0]{1,}', bits)]
    if sum(ones_len + zeros_len) != len(bits):
        raise ValueError('got not only ones and zeros')
    if len(bits) == 0:
        return bits
    # new code including KMeans algorithm
   # data = np.array(list(set(ones_len + zeros_len))).reshape(-1, 1)
    data = np.array(list(ones_len + zeros_len)).reshape(-1, 1)
    inertias = []

    for i in range(1, 4):
        kmeans = KMeans(n_clusters=i)
        kmeans.fit(data)
        inertias.append(kmeans.inertia_)
        if kmeans.inertia_ == 0.0:
            break
    print(set(ones_len))
    print(ones_len)
    print(set(zeros_len))
    print(zeros_len)
    no_of_clusters = inertias.index(min(inertias)) + 1
    kmeans = KMeans(n_clusters=no_of_clusters)
    kmeans.fit(data)
    clusters_dict = get_dict_of_clusters(kmeans.cluster_centers_.tolist())
    print(kmeans.cluster_centers_)
    ones_len_prediction = get_ones(clusters_dict, kmeans.predict(np.array(ones_len).reshape(-1, 1)))
    zeros_len_prediction = get_zeros(clusters_dict, kmeans.predict(np.array(zeros_len).reshape(-1, 1))) if len(zeros_len) > 0 else []
    
    return ''.join([one + zero for one, zero in zip_longest(ones_len_prediction, zeros_len_prediction, fillvalue='')])

def decodeMorse(morseCode):
    # ToDo: Accept dots, dashes and spaces, return human-readable message
    words, result = morseCode.split('   '), []
    for word in words:
        result.append(''.join([MORSE_CODE[char] for char in word.split()]))
    return ' '.join(result)

def main():
    print(decodeMorse(decodeBitsAdvanced('0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000')))
    print('should equal: ', 'HEY JUDE')
    print(decodeMorse(decodeBitsAdvanced('10001')))
    print('should equal EE')
    print(decodeMorse(decodeBitsAdvanced
    print(decodeMorse(decodeBitsAdvanced
    
    
if __name__ == '__main__':
    main()
    